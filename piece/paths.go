package piece

var (
	knightPaths = []Path{
		{{0, 1}, {0, 2}, {-1, 2}},
		{{0, 1}, {0, 2}, {1, 2}},
		{{1, 0}, {2, 0}, {2, 1}},
		{{1, 0}, {2, 0}, {2, -1}},
		{{0, -1}, {0, -2}, {1, -2}},
		{{0, -1}, {0, -2}, {-1, -2}},
		{{-1, 0}, {-2, 0}, {-2, 1}},
		{{-1, 0}, {-2, 0}, {-2, -1}},
	}

	tripleKnightPaths = []Path{
		{{0, 1}, {0, 2}, {0, 3}, {-1, 3}},
		{{0, 1}, {0, 2}, {0, 3}, {1, 3}},
		{{1, 0}, {2, 0}, {3, 0}, {3, 1}},
		{{1, 0}, {2, 0}, {3, 0}, {3, -1}},
		{{0, -1}, {0, -2}, {0, -3}, {1, -3}},
		{{0, -1}, {0, -2}, {0, -3}, {-1, -3}},
		{{-1, 0}, {-2, 0}, {-3, 0}, {-3, 1}},
		{{-1, 0}, {-2, 0}, {-3, 0}, {-3, -1}},
	}

	forwardKnightPaths = []Path{
		{{0, 1}, {0, 2}, {-1, 2}},
		{{0, 1}, {0, 2}, {1, 2}},
		{{1, 0}, {2, 0}, {2, 1}},
		{{-1, 0}, {-2, 0}, {-2, 1}},
	}

	noGhostKnightPaths = []Path{
		{{0, 1}, {0, 2}, {-1, 2}},
		{{-1, 0}, {-1, 1}, {-1, 2}},
		{{0, 1}, {-1, 1}, {-1, 2}},

		{{0, 1}, {0, 2}, {1, 2}},
		{{1, 0}, {1, 1}, {1, 2}},
		{{0, 1}, {1, 1}, {1, 2}},

		{{1, 0}, {2, 0}, {2, 1}},
		{{0, 1}, {1, 1}, {2, 1}},
		{{1, 0}, {1, 1}, {2, 1}},

		{{1, 0}, {2, 0}, {2, -1}},
		{{0, -1}, {1, -1}, {2, -1}},
		{{1, 0}, {1, -1}, {2, -1}},

		{{0, -1}, {0, -2}, {1, -2}},
		{{1, 0}, {1, -1}, {1, -2}},
		{{0, -1}, {1, -1}, {1, -2}},

		{{0, -1}, {0, -2}, {-1, -2}},
		{{-1, 0}, {-1, -1}, {-1, -2}},
		{{0, -1}, {-1, -1}, {-1, -2}},

		{{-1, 0}, {-2, 0}, {-2, 1}},
		{{0, 1}, {-1, 1}, {-2, 1}},
		{{-1, 0}, {-1, 1}, {-2, 1}},

		{{-1, 0}, {-2, 0}, {-2, -1}},
		{{0, -1}, {-1, -1}, {-2, -1}},
		{{-1, 0}, {-1, -1}, {-2, -1}},
	}

	noGhostForwardKnightPaths = []Path{
		{{0, 1}, {0, 2}, {-1, 2}},
		{{-1, 0}, {-1, 1}, {-1, 2}},
		{{0, 1}, {-1, 1}, {-1, 2}},

		{{0, 1}, {0, 2}, {1, 2}},
		{{1, 0}, {1, 1}, {1, 2}},
		{{0, 1}, {1, 1}, {1, 2}},

		{{1, 0}, {2, 0}, {2, 1}},
		{{0, 1}, {1, 1}, {2, 1}},
		{{1, 0}, {1, 1}, {2, 1}},

		{{-1, 0}, {-2, 0}, {-2, 1}},
		{{0, 1}, {-1, 1}, {-2, 1}},
		{{-1, 0}, {-1, 1}, {-2, 1}},
	}

	noGhostTripleKnightPaths = []Path{
		{{0, 1}, {0, 2}, {0, 3}, {-1, 3}},
		{{-1, 0}, {-1, 1}, {-1, 2}, {-1, 3}},
		{{0, 1}, {-1, 1}, {-1, 2}, {-1, 3}},
		{{0, 1}, {0, 2}, {-1, 2}, {-1, 3}},

		{{0, 1}, {0, 2}, {0, 3}, {1, 3}},
		{{1, 0}, {1, 1}, {1, 2}, {1, 3}},
		{{0, 1}, {1, 1}, {1, 2}, {1, 3}},
		{{0, 1}, {0, 2}, {1, 2}, {1, 3}},

		{{1, 0}, {2, 0}, {3, 0}, {3, 1}},
		{{0, 1}, {1, 1}, {2, 1}, {3, 1}},
		{{1, 0}, {1, 1}, {2, 1}, {3, 1}},
		{{1, 0}, {2, 0}, {2, 1}, {3, 1}},

		{{1, 0}, {2, 0}, {3, 0}, {3, -1}},
		{{0, -1}, {1, -1}, {2, -1}, {3, -1}},
		{{1, 0}, {1, -1}, {2, -1}, {3, -1}},
		{{1, 0}, {2, 0}, {2, -1}, {3, -1}},

		{{0, -1}, {0, -2}, {0, -3}, {1, -3}},
		{{1, 0}, {1, -1}, {1, -2}, {1, -3}},
		{{0, -1}, {1, -1}, {1, -2}, {1, -3}},
		{{0, -1}, {0, -2}, {1, -2}, {1, -3}},

		{{0, -1}, {0, -2}, {0, -3}, {-1, -3}},
		{{-1, 0}, {-1, -1}, {-1, -2}, {-1, -3}},
		{{0, -1}, {-1, -1}, {-1, -2}, {-1, -3}},
		{{0, -1}, {0, -2}, {-1, -2}, {-1, -3}},

		{{-1, 0}, {-2, 0}, {-3, 0}, {-3, 1}},
		{{0, 1}, {-1, 1}, {-2, 1}, {-3, 1}},
		{{-1, 0}, {-1, 1}, {-2, 1}, {-3, 1}},
		{{-1, 0}, {-2, 0}, {-2, 1}, {-3, 1}},

		{{-1, 0}, {-2, 0}, {-3, 0}, {-3, -1}},
		{{0, -1}, {-1, -1}, {-2, -1}, {-3, -1}},
		{{-1, 0}, {-1, -1}, {-2, -1}, {-3, -1}},
		{{-1, 0}, {-2, 0}, {-2, -1}, {-3, -1}},
	}

	bishopPaths = []Path{
		{{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}},
		{{-1, -1}, {-2, -2}, {-3, -3}, {-4, -4}, {-5, -5}, {-6, -6}, {-7, -7}},
		{{1, -1}, {2, -2}, {3, -3}, {4, -4}, {5, -5}, {6, -6}, {7, -7}},
		{{-1, 1}, {-2, 2}, {-3, 3}, {-4, 4}, {-5, 5}, {-6, 6}, {-7, 7}},
	}

	singleBishopPaths = []Path{
		{{1, 1}},
		{{-1, -1}},
		{{1, -1}},
		{{-1, 1}},
	}

	twoBishopPaths = []Path{
		{{1, 1}, {2, 2}},
		{{-1, -1}, {-2, -2}},
		{{1, -1}, {2, -2}},
		{{-1, 1}, {-2, 2}},
	}

	threeBishopPaths = []Path{
		{{1, 1}, {2, 2}, {3, 3}},
		{{-1, -1}, {-2, -2}, {-3, -3}},
		{{1, -1}, {2, -2}, {3, -3}},
		{{-1, 1}, {-2, 2}, {-3, 3}},
	}

	rookPaths = []Path{
		{{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}},
		{{-1, 0}, {-2, 0}, {-3, 0}, {-4, 0}, {-5, 0}, {-6, 0}, {-7, 0}},
		{{0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 7}},
		{{0, -1}, {0, -2}, {0, -3}, {0, -4}, {0, -5}, {0, -6}, {0, -7}},
	}

	fiveRookPaths = []Path{
		{{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}},
		{{-1, 0}, {-2, 0}, {-3, 0}, {-4, 0}, {-5, 0}},
		{{0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}},
		{{0, -1}, {0, -2}, {0, -3}, {0, -4}, {0, -5}},
	}

	fourRookPaths = []Path{
		{{1, 0}, {2, 0}, {3, 0}, {4, 0}},
		{{-1, 0}, {-2, 0}, {-3, 0}, {-4, 0}},
		{{0, 1}, {0, 2}, {0, 3}, {0, 4}},
		{{0, -1}, {0, -2}, {0, -3}, {0, -4}},
	}

	queenPaths = []Path{
		{{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}},
		{{-1, 0}, {-2, 0}, {-3, 0}, {-4, 0}, {-5, 0}, {-6, 0}, {-7, 0}},
		{{0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 7}},
		{{0, -1}, {0, -2}, {0, -3}, {0, -4}, {0, -5}, {0, -6}, {0, -7}},
		{{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}},
		{{-1, -1}, {-2, -2}, {-3, -3}, {-4, -4}, {-5, -5}, {-6, -6}, {-7, -7}},
		{{1, -1}, {2, -2}, {3, -3}, {4, -4}, {5, -5}, {6, -6}, {7, -7}},
		{{-1, 1}, {-2, 2}, {-3, 3}, {-4, 4}, {-5, 5}, {-6, 6}, {-7, 7}},
	}

	kingPaths = []Path{
		{{0, 1}},
		{{1, 1}},
		{{1, 0}},
		{{1, -1}},
		{{0, -1}},
		{{-1, -1}},
		{{-1, 0}},
		{{-1, 1}},
	}

	doubleKingPaths = []Path{
		{{0, 1}, {0, 2}},
		{{1, 1}, {2, 2}},
		{{1, 0}, {2, 0}},
		{{1, -1}, {2, -2}},
		{{0, -1}, {0, -2}},
		{{-1, -1}, {-2, -2}},
		{{-1, 0}, {-2, 0}},
		{{-1, 1}, {-2, 2}},
	}

	extendedBishopPaths = combinePathSlices(kingPaths, bishopPaths)
	extendedRookPaths   = combinePathSlices(kingPaths, rookPaths)

	extendedKnightRallyPaths = combinePathSlices(tripleKnightPaths, knightPaths)
	extendedBishopRallyPaths = combinePathSlices(extendedBishopPaths, doubleKingPaths)
	extendedRookRallyPaths   = combinePathSlices(extendedRookPaths, doubleKingPaths)
)

// The resulting slice only has one of any path.
func combinePathSlices(s ...[]Path) []Path {
	if len(s) == 0 {
		panic("no slices")
	}

	z := s[0]
	for _, ps := range s[1:] {
	LOOP:
		for _, p := range ps {
			for _, ep := range z {
				if pathEqual(p, ep) {
					continue LOOP
				}
			}
			z = append(z, p)
		}
	}

	return z
}

func pathEqual(a, b Path) bool {
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}
